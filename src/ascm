#!/usr/bin/python3
#
# ascm.py: Main program
#

import argparse
import logging
import signal
import sys

from AscmExecCmd import *


def quit_program(signal, frame):
    """
    Close curses screen and quit program.
    """
    ui.close_curses_screen()
    sys.exit(0)


def get_args() -> argparse.Namespace:
    """
    Obtain command-line arguments.
    """
    parser = argparse.ArgumentParser(
            description="Offer command menu from menu file")
    parser.add_argument('--ui',
            choices=['curses', 'tray', 'window'],
            default='tray',
            help="choose user interface (default: 'tray')")
    parser.add_argument('--icon',
            help="provide image file for tray icon")
    parser.add_argument('--pkexec',
            action='store_true',
            help="use pkexec instead of sudo")
    parser.add_argument('--output',
            choices=['normal', 'info', 'debug'],
            default='normal',
            help="method to gain root priviledges")
    parser.add_argument('menu_file',
            help="menu configuration file (see menu_syntax)")

    return parser.parse_args()


def main():
    """
    ascm main program
    """

    # Obtain command-line arguments.
    args = get_args()
    print(args)

    # Set logging level.
    log_level = {
        'normal': logging.WARNING,
        'info':   logging.INFO,
        'debug':  logging.DEBUG
    }
    logging.basicConfig(level=log_level[args.output])

    # Debug output: program arguments.
    logging.debug("")
    logging.debug("Selected program options:")
    for key, value in vars(args).items():
        logging.debug(f"    {key} = {value}")

    # Prepare ascm interface object (GUI or CLI).
    if args.ui == 'curses':
        import signal
        signal.signal(signal.SIGINT, quit_program)
        import AscmUiCurses
        Ui = AscmUiCurses.AscmUiCurses
    else:   # ui == "window" or "tray"
        import AscmUiGtk
        Ui = AscmUiGtk.AscmUiGtk

    # Run ascm interface.
    ui = Ui(args)
    ui.run()
    ui.finish()


if __name__ == "__main__":
    if sys.version_info < (3, 6):
        print("Python 3.6+ is needed.") # ... because f-format strings are used.
        # Python 3.6+ is provided at least in these distributions:
        # - Debian 10+ (2019-07)
        # - Ubuntu 18.04+ (2018-04)
        # - Mint 19+ (2018-06)
        # - Fedora 26+ (2017-07)
        sys.exit(1)

    main()
